import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  login:false,
  username:"",
  errorMessage:""
};


export const LogInSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    login: (state,action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      const {username,password} = action.payload
      if(username === "admin" && password ==="admin123"){
          state.login = true
          state.username = username
          state.errorMessage = ""
      }else{
          state.errorMessage = "Wrong username or Password"
      }
    },
    logout: (state) => {
      state.login = false
      state.username = ""
    },
    reset: (state) => {
        state.errorMessage = ""
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { login, logout ,reset} = LogInSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectLogin = (state) => state.login.login;
export const selectState = (state) => state.login;
export const selectUsername = (state) => state.login.username;
export const selectError = (state) => state.login.errorMessage;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default LogInSlice.reducer;
